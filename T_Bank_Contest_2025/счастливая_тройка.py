# В этом году главой Флатландии является Егор. Всего во Флатландии проживает n людей, каждый в своем доме. i-й дом находится в целочисленной точке (x_i, y_i).
# Егор может выделить некоторые тройки людей. Требуется лишь, чтобы каждый человек относился не более, чем к одной тройке. Тройка людей считается счастливой, если треугольник, образованный их домами, является невырожденным (то есть три дома не находятся на одной прямой).
# Помогите Егору определить, какого максимального количества счастливых троек можно добиться во Флатландии.
# Формат входных данных
# Первая строка содержит число n (3 <= n <= 300) — количество жителей во Флатландии.
# i-я из следующих строчек содержит числа x_i и y_i (-10^9 <= x_i, y_i <= 10^9) — координаты дома, где проживает i-й человек.
# Гарантируется, что никакие два дома не находятся в одной точке.
# Формат выходных данных
# Выведите одно число — максимальное количество счастливых троек, которого можно добиться во Флатландии.
# Комментарий к примеру
# В примере можно получить две счастливые тройки. Например, подойдет разбиение (1, 1), (2, 2), (1, 4) и (6, 3), (4, 5), (4, 1).

from math import gcd


def lucky_three():
    n = int(input())
    coords = []

    for _ in range(n):
        x, y = map(int, input().split())
        coords.append((x, y))

    if n < 3:
        print(0)
        return

    L = 1

    for i in range(n):
        slopes_count = {}
        x1, y1 = coords[i]

        for j in range(n):
            if j == i:
                continue
            x2, y2 = coords[j]
            dx, dy = x2 - x1, y2 - y1

            if dx == 0:
                slope = ('vert', 0)
            else:
                sign = -1 if dx * dy < 0 else 1
                dx, dy = abs(dx), abs(dy)
                g = gcd(dx, dy)
                dx //= g
                dy //= g
                slope = (sign * dy, dx)

            slopes_count[slope] = slopes_count.get(slope, 0) + 1

        local_max = 0 if not slopes_count else max(slopes_count.values())
        L = max(L, local_max + 1)

    if L <= 2 * n / 3:
        print(n // 3)
    else:
        print(n - L)


if __name__ == "__main__":
    lucky_three()

# Миша сидел в переговорке и решил нарисовать ее план на листке бумаги. Когда он закончил рисовать план переговорки, он положил лист с планом на пол переговорки. Теперь ему стало интересно: а есть ли на плане точка, которая лежит ровно на том месте пола, за которое она отвечает?
# Помогите ему найти эту точку.

# Формат входных данных:
# Переговорка и ее план имеют форму прямоугольника. Первая строка входного файла содержит два вещественных числа: координаты X и Y переговорки (1<=X,Y<=1000). Координаты углов переговорки равны (0,0), (X,0), (X,Y), (0,Y).
# Во второй строке файла даются восемь вещественных чисел, описывающих положение углов плана переговорки. Сначала вводятся координаты того угла плана, который соответствует углу переговорки с координатами (0,0), затем — (X,0), (X,Y) наконец, (0,Y). Гарантируется, что входные данные корректны, то есть план является прямоугольником, линейные размеры которого соответ- ствуют размерам переговорки, а также он не выходит за границы перегородки.
# Все числа во входном файле вещественные, заданы с точностью 
# 5 знаков после десятичной точки. План выполнен в масштабе не менее 0,0001 и строго менее 1.

# Формат выходных данных:
# Выведите два вещественных числа — координаты неподвижной точки в координатах переговорки. Выводить число нужно с точностью не менее четырех знаков после запятой.

# Замечание:
# Заметьте, что для читаемости условий входные данные в примере даются с меньшим количеством десятичных знаков. В реальных тестовых данных в координатах будут дополнительные нули на конце.

# Пример 1:
# Ввод:
# 10 5
# 3.0 2.5 1.0 2.5 1.0 1.5 3.0 1.5
# Вывод:
# 2.5000 2.0833


import sys


class Matrix2x2:
    def __init__(self, rows):
        self.rows = rows

    def det(self):

        return self[0, 0] * self[1, 1] - self[0, 1] * self[1, 0]

    def __getitem__(self, idx):
        if isinstance(idx, tuple):
            return self.rows[idx[0]][idx[1]]
        raise ValueError('Индекс должен быть кортежем')

    def replace_col(self, col, a1, a2):
        if col == 0:
            return Matrix2x2([[a1, self[0, 1]], [a2, self[1, 1]]])
        elif col == 1:
            return Matrix2x2([[self[0, 0], a1], [self[1, 0], a2]])
        else:
            raise ValueError('Некорректный индекс колонки')

    def solve_eq(self, x, y):
        d0 = self.det()
        if d0 == 0:
            raise ValueError('Решение невозможно, матрица вырождена')
        m1 = self.replace_col(0, x, y)
        m2 = self.replace_col(1, x, y)
        return m1.det() / d0, m2.det() / d0


def solve(X, Y, Ax, Ay, Bx, By, Cx, Cy, Dx, Dy):
    m = Matrix2x2([
        [X - Bx + Ax, -Dx + Ax],
        [-By + Ay, Y - Dy + Ay]
    ])
    x, y = m.solve_eq(Ax, Ay)
    return x * X, y * Y


if __name__ == "__main__":
    X, Y = map(float, sys.stdin.readline().split())
    Ax, Ay, Bx, By, Cx, Cy, Dx, Dy = map(float, sys.stdin.readline().split())
    px, py = solve(X, Y, Ax, Ay, Bx, By, Cx, Cy, Dx, Dy)
    print(f"{px:.4f} {py:.4f}")
